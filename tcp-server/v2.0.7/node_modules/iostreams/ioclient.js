
/* global IOStream */

const Fn = require('../utilities/fn-utilities').Fn;
var IOCOMMON = require('./iocommon');
var KIO = IOCOMMON.KIO;

var IOStream = require('./iostream').IOStream;
var IOReceptor = require('./ioreceptor').IOReceptor;
var IOBridge = require('./iobridge').IOBridge;

/**
 * Bridged Stream into a IOClient
 * @returns {IOClient}
 */
class IOClient extends IOStream {
  /**
   * Stream Opens/Starts Request
   * @returns {IOStream}
   */
  open() {
    return _ioclientOpen(this);
  }
  /**
   * Stream Opens/Starts Request
   * @returns {IOStream}
   */
  connect() {
    return _ioclientOpen(this);
  }
  /**
   * Creates a Bridge Connection request.
   * @param {String} ipaddress
   * @returns {IOStream}
   */
  createBridge(ipaddress) {
    return _ioclientCreateBridge(this, ipaddress);
  }
}
/**
 * @param {IOStream} io
 * @param {String} ipaddress
 * @returns {IOStream}
 */
function _ioclientCreateBridge(io, ipaddress) {
    /** @type {IOStream}  */
  let bridge;
   let boptions = Fn.extends({
    'address': ipaddress,
    'parent': io,
    'stream': io,
    'ondata': io.ondata,
    'onchange': io.onchange,
    'onerror': io.onerror,
    'onAliveRequest': null,
    /**
     * @param {IOStream} scket
     */
    'onAliveResponse': function(scket) {
      scket.send("~\r\n");
    }
  }, io.clientListener);
  bridge = new IOBridge(boptions);
  bridge.open();
  return bridge;
}
/**
 * @param {IOStream} io
 * @returns {IOStream}
 */
function _ioclientOpen(io) {
  //...................................................
  if (!io.receptor) {
    io.receptor = new IOReceptor({
      parent: io,
      isServer: true,
      /**
       * @param {Object} data
       * @param {IOStream} scket
       */
      oncomplete: function (data, scket) {
        if (!data || !scket) {
          return;
        }
        if (Fn.isFunction(scket.ondata)) {
          scket.ondata(data, scket);
        }
      }
    });
  }
  //...................................................
  if (!io.onAliveResponse) {
    /**
     * @param {IOStream} scket
     */
    io.onAliveResponse = function (scket) {
      scket.lastRead = Fn.millis();
      scket.send("~\r\n");
    };
  }
  //...................................................
  if (io.stream) {
    io.stream.on("data", function (data) {
      io.lastRead = Fn.millis();
      if (io.receptor) {
        io.receptor.receive(data);
        return true;
      }
      if (Fn.isFunction(io.ondata)) {
        io.ondata(data, io);
      }
      return true;
    });
    //
    io.stream.on("close", function () {
      io.stream = undefined;
      io.close();
    });
    //
    io.stream.on("end", function () {
      io.stream = undefined;
      io.close();
    });
    //
    io.stream.on("error", function (err) {
      if (Fn.isFunction(io.onerror)) {
        io.onerror(err, io);
      }
    });
  }
  //...................................................
  let tm = Fn.millis();
  io.lastRead = tm;
  io.lastWrite = tm;
  io.createdAt = tm;
  io.setIOState(KIO.connected);
  //...................................................
  if (io.parent && io.parent.children) {
    io.parent.children[io.address] = io;
  }
  return io;
}

module.exports = {
  IOClient
};
