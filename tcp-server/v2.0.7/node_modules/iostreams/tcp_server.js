
const Fn = require('../utilities/fn-utilities').Fn;
var IOCOMMON = require('./iocommon');
var KIO = IOCOMMON.KIO;

var IOStream = require('./iostream').IOStream;
var IOClient = require('./ioclient').IOClient;
var IOServer = require('./ioserver').IOServer;
var IOReceptor = require('./ioreceptor').IOReceptor;
var IOBridge = require('./iobridge').IOBridge;
var NET = require('net');

/**
 * IOServer as TCP Server
 * @returns {TcpServer}
 */
class TcpServer extends IOServer {
  /**
   * Server Starts to Listen
   * @param {Object} options Defines <b>host</b> and <b>port</b> parameters
   * @returns {IOServer}
   */
  listen(options) {
    return _tcpserverListen(this, options);
  }
}
/**
 * Starts Server Listening 
 * @param {IOServer} server
 * @param {Object} options
 * @returns {IOServer}
 */
function _tcpserverListen(server, options) {
  options = Fn.extends({
    'host': server.host,
    'port': server.port
  }, options);
  options.port = Fn.asNumber(options.port);
  //--------------------------------------------
  server.tserver = new NET.Server({
    allowHalfOpen: true

  }, function (socket) {
    socket.allowHalfOpen = true;
    //------------------------------------------
    // New Client Connection
    //
    let ipaddress = socket.remoteAddress + ":" + socket.remotePort;
    let coptions = Fn.extends({
      'parent': server,
      'stream': socket,
      'address': ipaddress,
      'isServer': true
    }, server.clientListener);
    /** @type {IOClient} */
    let client = new IOClient(coptions);
    client.open();
    return true;
  });
  //--------------------------------------------
  server.tserver.on('close', function () {
    server.tserver = undefined;
    server.close();
  });
  //--------------------------------------------
  server.tserver.on('error', function (err) {
    if (Fn.isFunction(server.onerror)) {
      server.onerror(err, server);
    }
  });
  //--------------------------------------------
  server.tserver.listen(options.port, options.host,
    function ()
    {
      server.setIOState(KIO.connected);
      //----------------------------------------------
      // Sets Server Looper control
      server.timerId = setInterval(function() {
        let cnames = Fn.parseToArray(server.children);
        for (let k in cnames) {
          let ipaddress = cnames[k];
          /** @type {IOStream}  */
          let client = server.children[ipaddress];
          if (client) client.checksAlive();
        }
      }, 250);
    });
  //
  //
  return server;
}

module.exports = {
  TcpServer
};
