

const Fn = require('../utilities/fn-utilities').Fn;
var IOCOMMON = require('./iocommon');
var KIO = IOCOMMON.KIO;

var IOStream = require('./iostream').IOStream;
var IOWebClient = require('./ws_client').IOWebClient;
var IOServer = require('./ioserver').IOServer;
var WS = require('ws');

/**
 * WebSocket Server.<br>Connection with Web Pages.
 * @returns {IOWebServer}
 */
class IOWebServer extends IOServer {
  /**
   * Server Starts to Listen
   * @param {Object} options Defines <b>host</b> and <b>port</b> parameters
   * @returns {IOServer}
   */
  listen(options) {
    return _wsserverListen(this, options);
  }
  /**
   * Server Close request
   */
  close() {
    _wsserverClose(this);
  }
}
/**
 * Starts Server Listening 
 * @param {IOServer} server
 * @param {Object} options
 * @returns {IOServer}
 */
function _wsserverListen(server, options) {
  options = Fn.extends({
    'host': server.host,
    'port': server.port
  }, options);
  options.port = Fn.asNumber(options.port);
  //......................................................
  server.children = {};
  server.tserver = new WS.WebSocketServer(
    {
      'port': options.port,
      'host': options.host
    },
    function () {
      server.setIOState(KIO.connected);
      //------------------------------------------
      server.timerId = setInterval(function () {
        let cnames = Fn.parseToArray(server.children);
        for (let k in cnames) {
          let ipaddress = cnames[k];
          /** @type {IOStream}  */
          let client = server.children[ipaddress];
          if (client) client.checksAlive();
        }
      });
    });
  //......................................................
  let wserver = server.tserver;  
  if (wserver) {
    wserver.on('connection', function (event) {
      /** @type {createWebSocketStream} */
      let socket = event;
      //--------------------------------------------
      // Serialize each connection
      //
      let ipa = server.ipName + ":" + server.scounter;
      server.scounter = (server.scounter + 1) & 0xffffff;
      //--------------------------------------------
      // Adds specific data to connection.
      //
      let coptions = Fn.extends({
        parent: server,
        stream: socket,
        address: ipa
      }, server.clientListener);
      /** @type {IOStream} */
      let wsclient = new IOWebClient(coptions);
      wsclient.open();
      //--------------------------------------------
      // Initial Message for Remote Page
      // Used to identify each one.
      //
      wsclient.send({
        'action': '@open',
        '@ip': ipa
      });
      return true;
    });
    //......................................................
    wserver.on('error', function (event) {
      if (Fn.isFunction(server.onerror)) {
        server.onerror(event, server);
      }
      return true;
    });
    //......................................................
    wserver.on('close', function () {
      server.tserver = undefined;
      server.close();
    });
  }
  //
  //......................................................
  return server;
}
/**
 * 
 * @param {IOServer} server 
 * @returns 
 */
function _wsserverClose(server) {
  if ((server.iostate == KIO.closed) ||
    (server.iostate == KIO.closing) ||
    (server.iostate == KIO.close_request)) {
    return server;
  }
  server.setIOState(KIO.closing);
  //-----------------------------------------------------
  let cnames = Fn.parseToArray(server.children);
  for (let k in cnames) {
    /** @type {IOStream}  */
    let client = server.children[cnames[k]];
    if (client)
      client.close({
        'action': 'disconnect',
        'reason': KIO.server_shutdown,
        'message': 'Server shutdown'
      });
  }
  //-----------------------------------------------------
  if (server.tserver) {
    try {
      if (Fn.isFunction(server.tserver.destroy)) {
        server.tserver.destroy();
      } else if (Fn.isFunction(server.tserver.close)) {
        server.tserver.close(function () {
          if (server.timerId) {
            clearInterval(server.timerId);
            server.timerId = 0;
          }
          server.tserver = undefined;
          server.setIOState(KIO.closed);
        });
        return server;
      }
    } catch (e) {
    }
    server.tserver = undefined;
  }
  //-----------------------------------------------------
  if (server.timerId) {
    clearInterval(server.timerId);
    server.timerId = 0;
  }
  server.setIOState(KIO.closed);
  return server;
}

module.exports = {
  IOWebServer
};
