
/* global IOStream */

const Fn = require('../utilities/fn-utilities').Fn;
var IOCOMMON = require('./iocommon');
var KIO = IOCOMMON.KIO;

var IOStream = require('./iostream').IOStream;
var IOReceptor = require('./ioreceptor').IOReceptor;

/**
 * Bridged Stream into a IOWebClient
 * @returns {IOWebClient}
 */
class IOWebClient extends IOStream {
  /**
   * Stream Opens/Starts Request
   * @returns {IOStream}
   */
  open() {
    return _wssocketOpen(this);
  }
  /**
   * Stream Close Request
   * @param {Object} reason Close reason
   */
  close(reason) {
    return _wsclientClose(this, reason);
  }
}
/**
 * @param {IOStream} io
 * @returns {IOStream}
 */
function _wssocketOpen(io) {
  if (io.parent && io.parent.children) {
    io.parent.children[io.address] = io;
  }
  //...................................................
  if (!io.receptor) {
    io.receptor = new IOReceptor({
      parent: io,
      isServer: true,
      /**
       * @param {Object} data
       * @param {IOStream} scket
       */
      oncomplete: function (data, scket) {
        if (!data || !scket) {
          return;
        }
        if (Fn.isFunction(scket.ondata)) {
          scket.ondata(data, scket);
        }
      }
    });
  }
  //...................................................
  if (!io.onAliveResponse) {
    /**
     * @param {IOStream} scket
     */
    io.onAliveResponse = function (scket) {
      scket.lastRead = Fn.millis();
      scket.send("~\r\n");
    };
  }
  //...................................................
  if (io.stream) {
    io.stream.on("data", function (data) {
      io.lastRead = Fn.millis();
      if (io.receptor) {
        io.receptor.receive(data);
        return true;
      }
      if (Fn.isFunction(io.ondata)) {
        io.ondata(data, io);
      }
      return true;
    });
    //
    io.stream.on("message", function (data) {
      io.lastRead = Fn.millis();
      if (io.receptor) {
        io.receptor.receive(data);
        return true;
      }
      if (Fn.isFunction(io.ondata)) {
        io.ondata(data, io);
      }
      return true;
    });
    //
    io.stream.on("close", function () {
      io.stream = undefined;
      io.close();
    });
    //
    io.stream.on("end", function () {
      io.stream = undefined;
      io.close();
    });
    //
    io.stream.on("error", function (err) {
      if (Fn.isFunction(io.onerror)) {
        io.onerror(err, io);
      }
    });
  }
  //...................................................
  io.setIOState(KIO.connected);
  return io;
}
/**
 * WsClient Close request
 * @param {IOStream} io 
 * @param {Object} reason 
 */
function _wsclientClose(io, reason) {
  if ((io.iostate == KIO.close_request) ||
    (io.iostate == KIO.closed) ||
    (io.iostate == KIO.closing)) {
    return io;
  }
  io.createdAt = Fn.millis();
  io.setIOState(KIO.closing);
  //.....................................................  
  if (io.stream) {
    io.send(reason);
    try {
      if (Fn.isFunction(io.stream.destroy)) {
        io.stream.destroy();
      } else if (Fn.isFunction(io.stream.close)) {
        io.stream.close();
      }
    } catch (e) {
    }
    io.stream = undefined;
  }
  //.....................................................
  if (io.parent && io.parent.children) {
    delete (io.parent.children[io.address]);
  }
  //.....................................................
  if (io.timerId) {
    clearInterval(io.timerId);
    io.timerId = 0;
  }
  //.....................................................
  io.setIOState(KIO.closed);
  return io;
}

module.exports = {
  IOWebClient
};
