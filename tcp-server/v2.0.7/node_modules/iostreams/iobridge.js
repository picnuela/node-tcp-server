
/* global IOStream */

const Fn = require('../utilities/fn-utilities').Fn;
var IOCOMMON = require('./iocommon');
var KIO = IOCOMMON.KIO;
var IOStream = require('./iostream').IOStream;

/**
 * Bridged Stream into a IOSocket
 * @returns {IOBridge}
 */
class IOBridge extends IOStream {
  send(data) {
    return _iobridgeSend(this, data);
  }
  close(reason) {
    return _iobridgeClose(this, reason);
  }
  open() {
    return _iobridgeOpen(this);
  }
}
/**
 * @param {IOStream} io
 * @param {Object} data
 * @returns {IOStream}
 */
function _iobridgeSend(io, data) {
  if (io.stream) {
    let bdata = {};
    bdata[KIO.bridgedIPKey] = io.address;
    bdata[KIO.bridgedDataKey] = data;
    io.stream.send(bdata);
  }
  return io;
}
/**
 * @param {IOStream} io
 * @param {Object} reason
 * @returns {IOStream}
 */
function _iobridgeClose(io, reason) {
  if ((io.iostate == KIO.close_request) ||
    (io.iostate == KIO.closing)) {
    return io;
  }
  io.setIOState(KIO.closing);
  //.............................................
  if (io.stream) {
    io.send(reason ? reason : KIO.defaultClose);
    if ((Fn.isServer(io.stream)) &&
      (Fn.isFunction(io.stream.send))) {
      io.stream.send({
        'action': 'bridge.closed',
        'ip': io.address
      });
    }
    io.stream = undefined;
  }
  //.............................................
  io.createdAt = Fn.millis();
  io.setIOState(KIO.close_request);
  return io;
}
/**
 * @param {IOStream} io
 * @returns {IOStream}
 */
function _iobridgeOpen(io) {
  if (io.parent && io.parent.children) {
    io.parent.children[io.address] = io;
  }
  io.send({ 'action': 'client.bind' });
  io.setIOState(KIO.connected);
  return io;
}

module.exports = {
  IOBridge
};
