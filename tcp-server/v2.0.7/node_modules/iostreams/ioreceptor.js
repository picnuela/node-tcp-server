
const Fn = require('../utilities/fn-utilities').Fn;
var IOCOMMON = require('./iocommon');
var KIO = IOCOMMON.KIO;
var IOStream = require('./iostream').IOStream;

/** 
 * Frame Receptor.
 */
class IOReceptor {
  constructor() {
    /** <b>IOReceptor</b> Who used me as receptor.
     * @type {IOStream} */
    this.parent;
    /** <b>IOReceptor</b> Reception Buffer.
     * @type {String} */
    this.rxString = "";
    /** <b>IOReceptor</b> Bracket counter.
     * @type {Number} */
    this.proof = 0;
    /** <b>IOReceptor</b> Last Character received
     * @type {String} */
    this.lastChar = ' ';
    /** <b>IOReceptor</b> Reception Flag.
     * @type {Boolean} */
    this.onFrame = false;
    /** <b>IOReceptor</b> Maximum time in millseconds to ends a frame.
     * @type {Number} */
    this.frameTimeout = 2500;
    /** <b>IOReceptor</b> Reception timestamp.
     * @type {Number} */
    this.lastRead = Fn.millis();
    /** <b>IOReceptor</b> Frame complete call back.
     * @type {Function} */
    this.oncomplete;
    /** <b>IOReceptor</b> Server Flag
     * @type {Boolean} */
    this.isServer = false;

    Fn.extends(this, arguments[0]);
    return this;
  }
  /**
   * <b>IOReceptor</b> parse received Data.
   * @param {Object/Buffer/String} data
   * @returns {String}
   */
  parseData(data) {
    if (typeof (data) === 'string') {
      return data;
    }
    let text = "";
    for (let c0 in data) {
      text += String.fromCharCode(data[c0]);
    }
    return text;
  }
  /**
   * <b>IOReceptor</b> Clear Frame.
   * @returns {IOReceptor}
   */
  clear() {
    let frame = this;
    frame.onFrame = false;
    frame.proof = 0;
    frame.rxString = '';
    frame.lastRead = Fn.millis();
    return frame;
  }
  /**
   * <b>IOReceptor</b> Launch message call back.
   * @returns {IOReceptor}
   */
  launch() {
    let frame = this;
    let data = arguments.length > 0
      ? arguments[0]
      : frame.rxString;
    //............................................
    let fn = frame.oncomplete;
    if (!Fn.isFunction(fn)) {
      return frame.clear();
    }
    //............................................
    if (!Fn.isJSON(data)) {
      data = Fn.asString(data);
      fn(data, frame.parent);
      return frame.clear();
    }
    //............................................
    let ipaddress = Fn.trim(data[KIO.bridgedIPKey]);
    if (ipaddress.length > 0) {
      let bdata = data[KIO.bridgedDataKey];
      /** @type {IOStream} */
      let bridge = frame.parent.children[ipaddress];
      if (!bridge) {
        if (!bdata) return frame.clear();
        switch (bdata.action) {
          case 'disconnect':
          case 'bridge.closed':
          case 'unsuback':
            return frame.clear();
        }
        bridge = frame.parent.createBridge(ipaddress);
      }
      if (bridge) {
        if (!bridge.isOpen()) return frame.clear();
        bridge.lastRead = Fn.millis();
        if (bdata) {
          if (Fn.isString(bdata)) {
            //---------------------------------------  
            // Alive request from remote connection.
            //
            let cdata = Fn.textDecode(bdata);
            if ((cdata.charAt(0) == '~') && (cdata.length < 4)) {
              let fn = bridge.onAliveResponse;
              if (Fn.isFunction(fn)) fn(bridge);
              return frame.clear();
            }
          }
        }
        if (Fn.isFunction(bridge.ondata)) {
          bridge.ondata(bdata, bridge);
          return frame.clear();
        }
      }
    }
    fn(data, frame.parent);
    return frame.clear();
  }
  /**
   * <b>IOReceptor</b> Load data and checks frame.
   * @param {Object/Buffer/String} data
   * @returns {IOReceptor}
   */
  receive(data) {
    let frame = this;
    data = frame.parseData(data);
    for (let k in data) {
      let c0, c1;
      c0 = data[k];
      c1 = frame.lastChar;
      frame.lastChar = c0;
      if (!frame.onFrame) {
        if (c0 <= ' ') continue;
      }
      frame.rxString += c0;
      frame.lastRead = Fn.millis();
      frame.onFrame = true;

      switch (c0) {
        case '{':
          if (frame.proof === 0) {
            frame.rxString = c0;
          }
          frame.proof += 1;
          break;

        case '}':
          if (frame.proof < 1) break;
          frame.proof -= 1;
          if (frame.proof === 0) {
            let json = Fn.parseToJSon(frame.rxString);
            frame.launch(json);
            frame.clear();
          }
          break;

        case '\n':
          if (frame.proof > 0) break;
          if (c1 === '\r') {
            if ((frame.rxString.length == 3) &&
              (frame.rxString.charAt(0) == '~')) {
              //--------------------------------------  
              // alive request from remote detected  
              let fn = frame.parent.onAliveResponse;
              if (Fn.isFunction(fn)) fn(frame.parent);
              frame.clear();
              break;
            }
            frame.launch(frame.rxString);
            frame.clear();
          }
          break;
      }
    }
    return frame;
  }
}

module.exports = {
  IOReceptor
};
