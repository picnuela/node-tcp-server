

const Fn = require('../utilities/fn-utilities').Fn;
const Tp = require('./topic_common').Tp;

var IOStream = require('../iostreams/iostream').IOStream;
var TopicDriver = require('./topic_driver').TopicDriver;

/**
 * Topic Container for subscribers meeting.
 * @returns {TopicPath}
 */
class TopicPath {
  constructor() {
    /**
     * Reference to Application driver.
     * @type {TopicDriver}
     */
    this.driver;
    /**
     * Topic's name
     * @type {String}
     */
    this.name = "";
    /**
     * Topic's value
     * @type {String}
     */
    this.value;
    /**
     * Topic's subscribed devices
     * @type {Array}
     */
    this.devices = {};

    Fn.extends(this, arguments[0]);
    return this;
  }
  /**
   * Adds the device to Topic's subscribers.
   * @param {IOStream} device Device to be susbcribed
   * @param {Object} request  Subscribe request
   * @returns {IOStream} device or null if error.
   */
  addDevice(device, request) {
    let topic = this;
    /** @type {IOStream} */
    let client;
    let dname = device.getName();
    if (dname.length > 0) {
      client = topic.devices[dname];
      if (!client) {
        topic.devices[dname] = device;
        client = topic.devices[dname];
        //............................................
        // Informs new Subscription
        Tp.deviceAddTopic(device, request);
        topic.driver.topicAdded(device, topic.name);
      }
    }
    return client;
  }
  /**
   * Gets device subscribed to this topic.
   * @param {Object} request
   * @returns {IOStream} Device or null if no found.
   */
  getDevice(request) {
    let topic = this;
    let dname = Tp.getDeviceId(request);
    /** @typr {IOStream} */
    let device = topic.devices[dname];
    return device;
  }
  /**
   * Removes device from Topic's subscribers
   * @param {Object} request
   * @returns {Boolean} true if device was removed.
   */
  removeDevice(request) {
    let topic = this;
    let dname = Tp.getDeviceId(request);
    /** @typr {IOStream} */
    let device = topic.devices[dname];
    if (device) {
      delete (topic.devices[dname]);
      Tp.deviceRemoveTopic(device, topic.name);
      if (topic.driver) {
        topic.driver.topicRemoved(device, topic.name);
      }
      return true;
    }
    return false;
  }
  /**
   * Gets the Topic name
   * @returns {String} Topic name
   */
  getName() {
    return this.name;
  }
  /**
   *
   * @param {IOStream} device
   * @param {Object} message
   */
  distribute(device, message) {
    let topic = this;
    let cnames = Fn.parseToArray(topic.devices);
    for (let k in cnames) {
      /** @type {IOStream} */
      let client = topic.devices[cnames[k]];
      if (client && client != device) {
        // ERROR AL CREAR EL TOPIC 
        let tname = Tp.deviceTopicName(client, topic.name);
        if (tname.length > 0) {
          client.send({
            'action': 'publish',
            'topic': tname,
            'data': message
          });
        }
      }
    }
    return topic;
  }
}

module.exports = {
  TopicPath
};

