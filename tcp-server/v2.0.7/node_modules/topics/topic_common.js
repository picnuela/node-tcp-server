
const Fn = require('../utilities/fn-utilities').Fn;
var IOCOMMON = require('../iostreams/iocommon');
var KIO = IOCOMMON.KIO;

var IOStream = require('../iostreams/iostream').IOStream;
var TopicDevice = require('./topic_device').TopicDevice;

/**
 * Utilities to drive Topic Paths
 */
class TpUtil {
  constructor() {
    return this;
  }
  /**
   * Gets next left side path.
   * @param {String} path
   * @returns {String}
   */
  nextLeft(path) {
    let pos = path.lastIndexOf("/");
    return pos > 0 ? path.substr(0, pos) : "";
  }
  /**
   * Trim left and right side of specified path.
   * @param {String} path
   * @returns {String}
   */
  topicTrim(path) {
    let dn, c0, i0, z0;
    z0 = path.length;
    i0 = 0;
    while (z0 > 0) {
      dn = false;
      c0 = path.charAt(z0 - 1);
      if (c0 > ' ') {
        switch (c0) {
          case '/':
            break;
          default:
            dn = true;
            break;
        }
      }
      if (dn)
        break;
      z0 -= 1;
    }
    while (i0 < z0) {
      dn = false;
      c0 = path.charAt(i0);
      if (c0 > ' ') {
        switch (c0) {
          case '/':
            break;
          default:
            dn = true;
            break;
        }
      }
      if (dn)
        break;
      i0 += 1;
    }
    return path.substring(i0, z0);
  }
  /**
   * Split into TopicName and Nick
   * @param {String} path
   * @returns {Array}
   */
  splitNick(path) {
    let pos = path.lastIndexOf("/./");
    let nck = "";
    if (pos > 0) {
      nck = path.substr(pos + 3);
      path = path.substr(0, pos);
    }
    return [path, nck];
  }
  /**
   * Gets DeviceId field from specified request
   * @param {Object} request
   * @returns {String} DeviceId field
   */
  getDeviceId(request) {
    let nkeys = 'id,name,device_id,device-id,device.id' +
      'clientId,client_id,client-id,client.id';
    let nme = Fn.isString(request)
      ? Fn.trim(request)
      : Fn.getMapString(request, nkeys);
    return nme.toLowerCase();
  }
  /**
   * Gets The Device Type field from specified request
   * @param {Object} request
   * @returns {String} Device Type field
   */
  getDeviceType(request) {
    let nkeys = 'type,device_type,device-type,device.type';
    let nme = Fn.isString(request)
      ? Fn.trim(request)
      : Fn.getMapString(request, nkeys);
    return nme;
  }
  /**
   * Gets LineEnd field from specified request
   * @param {Object} request
   * @returns {String} LineEnd field
   */
  getDeviceLineEnd(request) {
    let nkeys = 'lf,lineEnd,lineend,line_end,line-end,line.end';
    let nval = Fn.getMapString(request, nkeys);
    return (nval == 'true') ? "\r\n" : "";
  }
  /**
   * Gets Echo field from specified request
   * @param {Object} request
   * @returns {Boolean} Echo field
   */
  getDeviceEcho(request) {
    let nkeys = 'echo';
    let nval = Fn.getMapString(request, nkeys);
    nval = Fn.asBool(nval);
    return nval;
  }
  /**
   * Gets KeepAlive field form specified request
   * @param {Object} request
   * @returns {Number} KeepAlive field
   */
  getDeviceKeepAlive(request) {
    let nkeys = 'keepAlive,keepalive,alive';
    let nval = Fn.getMapString(request, nkeys);
    let ta = Fn.asNumber(nval);
    if (ta < 1) ta = KIO.maxKeepAlive;
    if (ta > KIO.maxKeepAlive) ta = KIO.maxKeepAlive;
    return ta;
  }
  /**
   * Gets Topic Name field from specified request
   * @param {Object} request
   * @returns {String} Topic Name field
   */
  getTopicName(request) {
    let fn = this;
    let nkeys = 'topic,name';
    let nme = Fn.isString(request)
      ? Fn.trim(request)
      : Fn.getMapString(request, nkeys);
    return fn.topicTrim(nme);
  }
  /**
   * Gets normalized Topic Name from specified request
   * @param {Object} request
   * @returns {String} Normalized Topic Name
   */
  getRealTopicName(request) {
    let fn = this;
    let fname = fn.getTopicName(request);
    let kname = fn.splitNick(fname);
    return kname[0].toLowerCase();
  }
  /**
   * Gets the field "data" from specified request
   * @param {Object} request
   * @returns {Object} field "data"
   */
  getRequestData(request) {
    let fn = this;
    let dat = Fn.getKey(request, 'data,payload,message');
    return dat;
  }
  /**
   * Gets The User Name field from specified request
   * @param {Object} request
   * @returns {String} User Name field
   */
  getUserName(request) {
    let nkeys = 'user,group,username,userName,user_name,user-name,user.name';
    let nme = Fn.isString(request)
      ? Fn.trim(request)
      : Fn.getMapString(request, nkeys);
    return nme;
  }
  /**
   * Gets The Password field from specified request
   * @param {Object} request
   * @returns {String} Password field
   */
  getPassword(request) {
    let nkeys = 'password,pass,passwd,pswd';
    let nme = Fn.isString(request)
      ? Fn.trim(request)
      : Fn.getMapString(request, nkeys);
    return nme;
  }
  /**
   * Gets The Protocol field from specified request
   * @param {Object} request
   * @returns {String} Protocol field
   */
  getProtocol(request) {
    let nkeys = 'protocol,protocolName,protocol_name' +
      'protocol-name,protocol.name';
    let nme = Fn.isString(request)
      ? Fn.trim(request)
      : Fn.getMapString(request, nkeys);
    if (nme.length < 1) nme = 'json';
    return nme;
  }
  /**
   * Gets The Protocol field from specified request
   * @param {Object} request
   * @returns {String} Protocol field
   */
  getVersion(request) {
    let nkeys = 'version,protocolVersion,protocol_version' +
      'protocol-version,protocol.version';
    let nme = Fn.isString(request)
      ? Fn.trim(request)
      : Fn.getMapString(request, nkeys);
    return nme;
  }
  /**
   * Adds a Topic for Device side, into specified Device
   * @param {IOStream} device   The Device
   * @param {Object} request    The Topic request
   * @returns {TopicDevice} The Topic Device side generated or null if error.
   */
  deviceAddTopic(device, request) {
    let fn = this;
    /** @type {TopicDevice} */
    let topicDevice;
    let nameTopic = fn.getTopicName(request);
    let ktopic = fn.splitNick(nameTopic);
    let topicName = ktopic[0].toLowerCase();
    if (topicName.length > 0) {
      /** @type {TopicDevice} */
      topicDevice = device.topics[topicName];
      if (!topicDevice) {
        topicDevice = new TopicDevice({
          fullName: nameTopic,
          name: ktopic[0],
          nick: ktopic[1]
        });
        device.topics[topicName] = topicDevice;
        topicDevice = device.topics[topicName];
      }
    }
    return topicDevice;
  }
  /**
   * Gets a Topic for Device side, from specified Device
   * @param {IOStream} device The device
   * @param {Object} request  The Topic request
   * @returns {TopicDevice}   The Topic for Device side.
   */
  deviceGetTopic(device, request) {
    let fn = this;
    let topicName = fn.getRealTopicName(request);
    /** @type {TopicDevice} */
    let topicDevice = device.topics[topicName];
    return topicDevice;
  }
  /**
   * Removes a Topic for Device side, from specified Device
   * @param {IOStream} device The device
   * @param {Object} request  The topic request
   * @returns {Boolean}
   */
  deviceRemoveTopic(device, request) {
    let fn = this;
    let topicName = fn.getRealTopicName(request);
    if (device.topics[topicName]) {
      delete (device.topics[topicName]);
      return true;
    }
    return false;
  }
  /**
   * Gets a Topic for Device side, from specified Device
   * @param {IOStream} device   The Device
   * @param {Object} request    The request with the topic name
   * @returns {String} Device's Topic name
   */
  deviceTopicName(device, request) {
    let fn = this;
    let topicName = fn.getRealTopicName(request);
    /** @type {TopicDevice} */
    let topicDevice = device.topics[topicName];
    if (topicDevice) {
      return topicDevice.nick.length > 0
        ? topicDevice.nick
        : topicDevice.name;
    }
    return "";
  }
}
/**
 * Topic Paths Utilities
 * @type {TpUtil}
 */
const Tp = new TpUtil();

module.exports = {
  TpUtil,
  Tp
};
